name: Docker Image CI

on:
  repository_dispatch:
    types: [create_pre_release, release_vm]
#   release:
#     types: [published]

jobs:
  create_pre_release:
    if: ${{ github.event_name == 'repository_dispatch' && github.event.client_payload.job_name == 'create_pre_release' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      VM_TAG: ${{ github.event.client_payload.tag }}
      VM_BRANCH: ${{ github.event.client_payload.tag }}/vm-updates
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - uses: actions/checkout@v3
    - name: Setup GitHub Bot user
      run: |
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
        git config user.email "111365622+commitly[bot]@users.noreply.github.com"
        git config user.name "commitly-bot[bot]"
    - name: Create tag on the HEAD and push it so we can create a pre-release
      run: |
        git tag $VM_TAG
        git push origin $VM_TAG
    - name: Install dependencies
      run: go install github.com/github-release/github-release@v0.10.0
    - name: Generate REPO environment variable
      run: |
        REPO=`echo $GITHUB_REPOSITORY | tr '/' '\n' | tail -n 1`
        echo "REPO=$REPO" >> $GITHUB_ENV
    - name: Make it a pre-release so the assets will have an easy-to-parse download link
      run: |
        ~/go/bin/github-release release \
          -u $GITHUB_REPOSITORY_OWNER \
          -r $REPO \
          --tag $VM_TAG \
          --name $VM_TAG \
          --pre-release
        
  release_vm:
    if: ${{ github.event_name == 'repository_dispatch' && github.event.client_payload.job_name == 'release_vm' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      VM_TAG: ${{ github.event.client_payload.tag }}
      VM_BRANCH: ${{ github.event.client_payload.tag }}/vm-updates
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - name: Get the VM_FOLDERNAME and VM_VERSION number
      run: |
        echo $VM_TAG
        node -p "
          const parts = process.env.VM_TAG.split('-');
          const last = parts.length - 1;
          const fs = require('fs');
          fs.writeFileSync('/tmp/VM_VERSION', parts[last]);
        "
        echo "VM_VERSION=$(cat /tmp/VM_VERSION)" >> $GITHUB_ENV
        node -p "
          const parts = process.env.VM_TAG.split('-');
          const last = parts.length - 1;
          const fs = require('fs');
          fs.writeFileSync('/tmp/VM_FOLDERNAME', process.env.VM_TAG.replace('-'+parts[last],''));
        "
        echo "VM_FOLDERNAME=$(cat /tmp/VM_FOLDERNAME)" >> $GITHUB_ENV
        cat /tmp/VM_VERSION && cat /tmp/VM_FOLDERNAME
        rm /tmp/VM_VERSION && rm /tmp/VM_FOLDERNAME
    - name: Generate REPO environment variable
      run: |
        REPO=`echo $GITHUB_REPOSITORY | tr '/' '\n' | tail -n 1`
        echo "REPO=$REPO" >> $GITHUB_ENV
    - name: Install dependencies
      run: go install github.com/github-release/github-release@v0.10.0
    - name: Validate that the artifact exists
      run: |
        ARTIFACT_FILENAME=`~/go/bin/github-release info \
          -u $GITHUB_REPOSITORY_OWNER \
          -r $REPO \
          --tag $VM_TAG | grep artifact | awk '{print $3}' | sed 's/,$//g'`
        if [ "$ARTIFACT_FILENAME" == "$VM_TAG.tar.xz" ]; then
          echo "Artifact found...proceed to download..."
          echo "ARTIFACT_FILENAME=$ARTIFACT_FILENAME" >> $GITHUB_ENV
        else
          echo "Artifact not found...exiting..."
          ~/go/bin/github-release info \
            -u $GITHUB_REPOSITORY_OWNER \
            -r $REPO \
            --tag $VM_TAG
          exit 1
        fi
    - name: Download and extract the artifact to /tmp folder
      working-directory: /tmp
      run: |
        curl \
          -L https://github.com/$GITHUB_REPOSITORY/releases/download/$VM_TAG/$ARTIFACT_FILENAME \
          -o $ARTIFACT_FILENAME
        tar xvfJ $ARTIFACT_FILENAME
        ls -ltrSha
    - name: Checkout the repository
      uses: actions/checkout@v3
    - name: Copy the extracted files from the /tmp folder to the VM folder
      run: |
        echo "Foldername = "$VM_FOLDERNAME
        ls -ltrSha
        pwd
        cp -pr /tmp/$VM_FOLDERNAME/* $VM_FOLDERNAME/
    - name: Create Download Script
      run: |
        echo "curl -L https://github.com/$GITHUB_REPOSITORY/releases/download/$VM_TAG/$ARTIFACT_FILENAME -o $ARTIFACT_FILENAME && tar xvfJ $ARTIFACT_FILENAME *.qcow2" > $VM_FOLDERNAME/download-vm.sh
    - name: Setup GitHub Bot user
      run: |
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
        git config user.email "111365622+commitly[bot]@users.noreply.github.com"
        git config user.name "commitly-bot[bot]"
    - name: Commit/push files to repository
      run: |
        git add $VM_FOLDERNAME/download-vm.sh
        #git add $VM_FOLDERNAME/*
        git add .
        git status
        git checkout -b $VM_BRANCH
        git commit -m "$VM_TAG: Updating VM"
        git push origin $VM_BRANCH
    - name: Retag the release to point to the commits
      run: |
        git fetch --tags
        git tag -d $VM_TAG
        git push origin --delete $VM_TAG
        git tag $VM_TAG
        git push origin $VM_TAG
    - name: Publish the release
      run: |
        ~/go/bin/github-release edit \
          -u $GITHUB_REPOSITORY_OWNER \
          -r $REPO \
          --tag $VM_TAG \
          --name $VM_TAG
          
        
