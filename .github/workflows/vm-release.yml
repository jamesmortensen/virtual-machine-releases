name: Docker Image CI

on:
  repository_dispatch:
#   release:
#     types: [published]

jobs:
  release_vm:
    if: ${{ github.event_name == 'repository_dispatch' }}
    runs-on: ubuntu-latest
    env:
      VM_TAG: ${{ github.event.client_payload.tag }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - name: Get the VM_FOLDERNAME and VM_VERSION number
      run: |
        echo $VM_TAG
        node -p "
          const parts = process.env.VM_TAG.split('-');
          const last = parts.length - 1;
          const fs = require('fs');
          fs.writeFileSync('/tmp/VM_VERSION', parts[last]);
        "
        echo "VM_VERSION=$(cat /tmp/VM_VERSION)" >> $GITHUB_ENV
        node -p "
          const parts = process.env.VM_TAG.split('-');
          const last = parts.length - 1;
          const fs = require('fs');
          fs.writeFileSync('/tmp/VM_FOLDERNAME', process.env.VM_TAG.replace('-'+parts[last],''));
        "
        echo "VM_FOLDERNAME=$(cat /tmp/VM_FOLDERNAME)" >> $GITHUB_ENV
        cat /tmp/VM_VERSION && cat /tmp/VM_FOLDERNAME
        rm /tmp/VM_VERSION && rm /tmp/VM_FOLDERNAME
    - name: Install dependencies
      run: go install github.com/github-release/github-release@v0.10.0
    - name: Validate that the artifact exists
      run: |
        ARTIFACT_FILENAME=`~/go/bin/github-release info \
          -u jamesmortensen \
          -r virtual-machine-releases \
          --tag $VM_TAG | grep artifact | awk '{print $3}' | sed 's/,$//g'`
        if [ "$ARTIFACT_FILENAME" == "$VM_TAG.tar.xz" ]; then
          echo "Artifact found...proceed to download..."
          echo "ARTIFACT_FILENAME=$ARTIFACT_FILENAME" >> $GITHUB_ENV
        else
          echo "Artifact not found...exiting..."
          ~/go/bin/github-release info \
            -u jamesmortensen \
            -r virtual-machine-releases \
            --tag $VM_TAG
          exit 1
        fi
    - name: Download and extract the artifact to /tmp folder
      working-directory: /tmp
      run: |
        curl \
          -L https://github.com/jamesmortensen/virtual-machine-releases/releases/download/$VM_TAG/$ARTIFACT_FILENAME \
          -o $ARTIFACT_FILENAME
        tar xvfJ $ARTIFACT_FILENAME
        ls -ltrSha
    - name: Checkout the repository
      uses: actions/checkout@v3
    - name: Copy the extracted files from the /tmp folder to the VM folder
      run: |
        echo "Foldername = "$VM_FOLDERNAME
        ls -ltrSha
        pwd
        cp -pr /tmp/$VM_FOLDERNAME/* $VM_FOLDERNAME/
    - name: Create Download Script
      run: |
        echo "curl -L https://github.com/jamesmortensen/virtual-machine-releases/releases/download/$VM_TAG/$ARTIFACT_FILENAME && tar xvfJ $ARTIFACT_FILENAME *.qcow2" > $VM_FOLDERNAME/download-vm.sh
    - name: Commit/push files to repository
      run: |
        git config advice.addIgnoredFile false
        git add $VM_FOLDERNAME/download-vm.sh
        git add $VM_FOLDERNAME/*
        git status
        git commit -am "Updating VM $VM_TAG"
        #git push origin master
        
